///! libphonenumber-sys
///!
///! This is a very early atempt to create ffi bindings to googles excellent <a href="">libphonenumber</a>. Most of the crate has been autogenerated with <a href="https://github.com/rust-qt/cpp_to_rust">cpp_to_rust</a> and then modified to work better with rusts native types.
///! Many functions are not properly implemented yet, especially the ones that take or emit std::strings, as they require additional modifications to the c wrapper.
///!
///! # Example
///! ```
///! use libphonenumber_sys::{PhoneNumberUtil,PhoneNumber,PhoneNumberFormat,PhoneNumberUtilError};
///!
///! //get instance of PhoneNumberUtil
///! let util = PhoneNumberUtil::get_instance();
///!
///! //construct a number by hand
///! let number1 = PhoneNumber::new();
///! number1.set_country_code(1);
///! number1.set_national_number(2128322000);
///!
///! //check if number is valid
///! assert_eq!(util.is_valid_number(&number1), true);
///!
///! //parse a number from a string
///! let number2 = util.parse("(800) 1234-5678","US").unwrap();
///!
///! assert_eq!(number2.country_code(), 1);
///! assert_eq!(number2.national_number(), 80012345678);
///!
///! //format a number as E164 string
///! let e164 = util.format(&number2, PhoneNumberFormat::E164);
///!
///! assert_eq!(e164, "+180012345678");
///! ```
pub extern crate libc;
pub extern crate cpp_utils;

trait NewUninitialized {
  unsafe fn new_uninitialized() -> Self;
}
#[allow(dead_code)]
mod ffi;
pub mod allocator;
pub mod arena;
pub mod arenastring;
pub mod asyoutypeformatter;
pub mod atomic_sequence_num;
pub mod atomicops_internals_x86_gcc;
pub mod basic_string;
pub mod callback;
pub mod char_traits;
pub mod common;
pub mod cpp_type_traits;
pub mod ctype_base;
pub mod cxxabi_forced;
pub mod exception;
pub mod extension_set;
pub mod ios_base;
pub mod libio;
pub mod limits;
pub mod locale;
pub mod locale_classes;
pub mod locale_facets;
pub mod lock;
pub mod lock_posix;
pub mod logging;
pub mod message_lite;
pub mod mutex;
pub mod new;
pub mod once;
pub mod phonemetadata;
pub mod phonenumber;
pub mod phonenumbermatch;
pub mod phonenumbermatcher;
pub mod phonenumberutil;
pub mod port;
pub mod predefined_ops;
pub mod pthread;
pub mod pthreadtypes;
pub mod regexp_adapter;
pub mod regexp_cache;
pub mod repeated_field;
pub mod sched;
pub mod scoped_ptr;
pub mod shortnumberinfo;
pub mod sigaction;
pub mod sigcontext;
pub mod siginfo;
pub mod sigstack;
pub mod singleton_posix;
pub mod stdexcept;
pub mod stdlib;
pub mod stl_bvector;
pub mod stl_function;
pub mod stl_iterator_base_types;
pub mod stl_list;
pub mod stl_pair;
pub mod stl_set;
pub mod stl_tree;
pub mod stl_vector;
pub mod template_util;
pub mod thread_checker;
pub mod time;
pub mod timex;
pub mod typeinfo;
pub mod ucontext;
pub mod unicodestring;
pub mod unicodetext;
pub mod xlocale;

pub use phonenumberutil::i18n::phonenumbers::PhoneNumberUtil as PhoneNumberUtil;
pub use phonenumber::i18n::phonenumbers::PhoneNumber as PhoneNumber;
pub use phonenumberutil::i18n::phonenumbers::phone_number_util::PhoneNumberFormat as PhoneNumberFormat;
pub use phonenumberutil::i18n::phonenumbers::phone_number_util::ErrorType as PhoneNumberUtilError;


