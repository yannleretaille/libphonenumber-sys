#ifndef LIBPHONENUMBER_SYS_C_PHONENUMBERUTIL_H
#define LIBPHONENUMBER_SYS_C_PHONENUMBERUTIL_H

#include "libphonenumber_sys_c_global.h"

extern "C" {

LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_ConvertAlphaCharactersInNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_Format(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, i18n::phonenumbers::PhoneNumberUtil::PhoneNumberFormat number_format, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT const char* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_Format_Str(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, i18n::phonenumbers::PhoneNumberUtil::PhoneNumberFormat number_format);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_FormatByPattern(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, i18n::phonenumbers::PhoneNumberUtil::PhoneNumberFormat number_format, const google::protobuf::RepeatedPtrField< i18n::phonenumbers::NumberFormat >* user_defined_formats, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_FormatInOriginalFormat(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_calling_from, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_FormatNationalNumberWithCarrierCode(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* carrier_code, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_FormatNationalNumberWithPreferredCarrierCode(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* fallback_carrier_code, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_FormatNumberForMobileDialing(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_calling_from, bool with_formatting, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_FormatOutOfCountryCallingNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* calling_from, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_FormatOutOfCountryKeepingAlphaChars(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* calling_from, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* formatted_number);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::AsYouTypeFormatter* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetAsYouTypeFormatter(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetCountryCodeForRegion(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetCountryMobileToken(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, int country_calling_code, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* mobile_token);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetExampleNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetExampleNumberForNonGeoEntity(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, int country_calling_code, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetExampleNumberForType_region_code_type_number(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code, i18n::phonenumbers::PhoneNumberUtil::PhoneNumberType type, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetExampleNumberForType_type_number(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, i18n::phonenumbers::PhoneNumberUtil::PhoneNumberType type, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetInstance();
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetInvalidExampleNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetLengthOfGeographicalAreaCode(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetLengthOfNationalDestinationCode(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetNationalSignificantNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* national_significant_num);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetNddPrefixForRegion(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code, bool strip_non_digits, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* national_prefix);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::PhoneNumberType libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetNumberType(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetRegionCodeForCountryCode(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, int country_code, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetRegionCodeForNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetRegionCodesForCountryCallingCode(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, int country_calling_code, std::__cxx11::list< std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >, std::allocator< std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > > > >* region_codes);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetSupportedGlobalNetworkCallingCodes(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, std::set< int, std::less< int >, std::allocator< int > >* calling_codes);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_GetSupportedRegions(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, std::set< std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >, std::less< std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > > > >* regions);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsAlphaNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsNANPACountry(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsNumberGeographical_phone_number(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* phone_number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsNumberGeographical_phone_number_type_country_calling_code(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, i18n::phonenumbers::PhoneNumberUtil::PhoneNumberType phone_number_type, int country_calling_code);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::MatchType libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsNumberMatch(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* first_number, const i18n::phonenumbers::PhoneNumber* second_number);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::MatchType libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsNumberMatchWithOneString(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* first_number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* second_number);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::MatchType libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsNumberMatchWithTwoStrings(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* first_number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* second_number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsPossibleNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsPossibleNumberForString(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_dialing_from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::ValidationResult libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsPossibleNumberWithReason(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsValidNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_IsValidNumberForRegion(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const i18n::phonenumbers::PhoneNumber* number, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* region_code);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_NormalizeDiallableCharsOnly(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_NormalizeDigitsOnly(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* number);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::ErrorType libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_Parse(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* number_to_parse, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* default_region, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::ErrorType libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_Parse_Str(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, char* number_to_parse_str, size_t number_to_parse_len, char* default_region_str, size_t default_region_len, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberUtil::ErrorType libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_ParseAndKeepRawInput(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* number_to_parse, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* default_region, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_TruncateTooLongNumber(const i18n::phonenumbers::PhoneNumberUtil* this_ptr, i18n::phonenumbers::PhoneNumber* number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_delete(i18n::phonenumbers::PhoneNumberUtil* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberUtil_destructor(i18n::phonenumbers::PhoneNumberUtil* this_ptr);

} // extern "C"

#endif // LIBPHONENUMBER_SYS_C_PHONENUMBERUTIL_H
