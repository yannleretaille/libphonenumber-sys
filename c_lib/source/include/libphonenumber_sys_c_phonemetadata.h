#ifndef LIBPHONENUMBER_SYS_C_PHONEMETADATA_H
#define LIBPHONENUMBER_SYS_C_PHONEMETADATA_H

#include "libphonenumber_sys_c_global.h"

extern "C" {

LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_ByteSize(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_CheckTypeAndMergeFrom(i18n::phonenumbers::NumberFormat* this_ptr, const google::protobuf::MessageLite* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_Clear(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_CopyFrom(i18n::phonenumbers::NumberFormat* this_ptr, const i18n::phonenumbers::NumberFormat* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_DiscardUnknownFields(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_GetCachedSize(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_GetTypeName_as_ptr(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_GetTypeName_to_output(const i18n::phonenumbers::NumberFormat* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* output);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_IsInitialized(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_MergeFrom(i18n::phonenumbers::NumberFormat* this_ptr, const i18n::phonenumbers::NumberFormat* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_New_arena(const i18n::phonenumbers::NumberFormat* this_ptr, google::protobuf::Arena* arena);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_New_no_args(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_Swap(i18n::phonenumbers::NumberFormat* this_ptr, i18n::phonenumbers::NumberFormat* other);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_add_leading_digits_pattern_char(i18n::phonenumbers::NumberFormat* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_add_leading_digits_pattern_char_unsigned_long(i18n::phonenumbers::NumberFormat* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_add_leading_digits_pattern_no_args(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_add_leading_digits_pattern_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::NumberFormat* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_clear_domestic_carrier_code_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_clear_format(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_clear_leading_digits_pattern(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_clear_national_prefix_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_clear_national_prefix_optional_when_formatting(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_clear_pattern(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_constructor_from(const i18n::phonenumbers::NumberFormat* from, i18n::phonenumbers::NumberFormat* output);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_constructor_no_args(i18n::phonenumbers::NumberFormat* output);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_default_instance();
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_delete(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_destructor(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_domestic_carrier_code_formatting_rule(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_format(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_has_domestic_carrier_code_formatting_rule(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_has_format(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_has_national_prefix_formatting_rule(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_has_national_prefix_optional_when_formatting(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_has_pattern(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_leading_digits_pattern_index(const i18n::phonenumbers::NumberFormat* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT const google::protobuf::RepeatedPtrField< std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_leading_digits_pattern_no_args(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_leading_digits_pattern_size(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_mutable_domestic_carrier_code_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_mutable_format(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_mutable_leading_digits_pattern_index(i18n::phonenumbers::NumberFormat* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT google::protobuf::RepeatedPtrField< std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_mutable_leading_digits_pattern_no_args(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_mutable_national_prefix_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_mutable_pattern(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_mutable_unknown_fields(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_national_prefix_formatting_rule(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_national_prefix_optional_when_formatting(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_new_from(const i18n::phonenumbers::NumberFormat* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_new_no_args();
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_operator_assign(i18n::phonenumbers::NumberFormat* this_ptr, const i18n::phonenumbers::NumberFormat* from);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_pattern(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_release_domestic_carrier_code_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_release_format(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_release_national_prefix_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_release_pattern(i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_allocated_domestic_carrier_code_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* domestic_carrier_code_formatting_rule);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_allocated_format(i18n::phonenumbers::NumberFormat* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* format);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_allocated_national_prefix_formatting_rule(i18n::phonenumbers::NumberFormat* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* national_prefix_formatting_rule);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_allocated_pattern(i18n::phonenumbers::NumberFormat* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* pattern);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_domestic_carrier_code_formatting_rule_char(i18n::phonenumbers::NumberFormat* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_domestic_carrier_code_formatting_rule_char_unsigned_long(i18n::phonenumbers::NumberFormat* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_domestic_carrier_code_formatting_rule_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::NumberFormat* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_format_char(i18n::phonenumbers::NumberFormat* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_format_char_unsigned_long(i18n::phonenumbers::NumberFormat* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_format_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::NumberFormat* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_leading_digits_pattern_int_char(i18n::phonenumbers::NumberFormat* this_ptr, int index, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_leading_digits_pattern_int_char_unsigned_long(i18n::phonenumbers::NumberFormat* this_ptr, int index, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_leading_digits_pattern_int_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::NumberFormat* this_ptr, int index, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_national_prefix_formatting_rule_char(i18n::phonenumbers::NumberFormat* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_national_prefix_formatting_rule_char_unsigned_long(i18n::phonenumbers::NumberFormat* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_national_prefix_formatting_rule_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::NumberFormat* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_national_prefix_optional_when_formatting(i18n::phonenumbers::NumberFormat* this_ptr, bool value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_pattern_char(i18n::phonenumbers::NumberFormat* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_pattern_char_unsigned_long(i18n::phonenumbers::NumberFormat* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_set_pattern_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::NumberFormat* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_NumberFormat_unknown_fields(const i18n::phonenumbers::NumberFormat* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_ByteSize(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_CheckTypeAndMergeFrom(i18n::phonenumbers::PhoneMetadataCollection* this_ptr, const google::protobuf::MessageLite* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_Clear(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_CopyFrom(i18n::phonenumbers::PhoneMetadataCollection* this_ptr, const i18n::phonenumbers::PhoneMetadataCollection* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_DiscardUnknownFields(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_GetCachedSize(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_GetTypeName_as_ptr(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_GetTypeName_to_output(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* output);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_IsInitialized(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_MergeFrom(i18n::phonenumbers::PhoneMetadataCollection* this_ptr, const i18n::phonenumbers::PhoneMetadataCollection* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadataCollection* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_New_arena(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr, google::protobuf::Arena* arena);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadataCollection* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_New_no_args(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_Swap(i18n::phonenumbers::PhoneMetadataCollection* this_ptr, i18n::phonenumbers::PhoneMetadataCollection* other);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_add_metadata(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_clear_metadata(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_constructor_from(const i18n::phonenumbers::PhoneMetadataCollection* from, i18n::phonenumbers::PhoneMetadataCollection* output);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_constructor_no_args(i18n::phonenumbers::PhoneMetadataCollection* output);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneMetadataCollection* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_default_instance();
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_delete(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_destructor(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_metadata_index(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT const google::protobuf::RepeatedPtrField< i18n::phonenumbers::PhoneMetadata >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_metadata_no_args(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_metadata_size(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_mutable_metadata_index(i18n::phonenumbers::PhoneMetadataCollection* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT google::protobuf::RepeatedPtrField< i18n::phonenumbers::PhoneMetadata >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_mutable_metadata_no_args(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_mutable_unknown_fields(i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadataCollection* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_new_from(const i18n::phonenumbers::PhoneMetadataCollection* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadataCollection* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_new_no_args();
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadataCollection* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_operator_assign(i18n::phonenumbers::PhoneMetadataCollection* this_ptr, const i18n::phonenumbers::PhoneMetadataCollection* from);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadataCollection_unknown_fields(const i18n::phonenumbers::PhoneMetadataCollection* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_ByteSize(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_CheckTypeAndMergeFrom(i18n::phonenumbers::PhoneMetadata* this_ptr, const google::protobuf::MessageLite* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_Clear(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_CopyFrom(i18n::phonenumbers::PhoneMetadata* this_ptr, const i18n::phonenumbers::PhoneMetadata* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_DiscardUnknownFields(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_GetCachedSize(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_GetTypeName_as_ptr(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_GetTypeName_to_output(const i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* output);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_IsInitialized(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_MergeFrom(i18n::phonenumbers::PhoneMetadata* this_ptr, const i18n::phonenumbers::PhoneMetadata* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_New_arena(const i18n::phonenumbers::PhoneMetadata* this_ptr, google::protobuf::Arena* arena);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_New_no_args(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_Swap(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneMetadata* other);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_add_intl_number_format(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_add_number_format(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_carrier_specific(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_carrier_specific(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_country_code(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_emergency(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_fixed_line(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_general_desc(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_id(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_intl_number_format(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_leading_digits(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_leading_zero_possible(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_main_country_for_code(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_mobile(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_mobile_number_portable_region(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_national_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_national_prefix_for_parsing(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_national_prefix_transform_rule(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_no_international_dialling(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_number_format(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_pager(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_personal_number(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_preferred_extn_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_preferred_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_premium_rate(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_same_mobile_and_fixed_line_pattern(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_shared_cost(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_short_code(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_standard_rate(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_toll_free(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_uan(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_voicemail(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_clear_voip(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_constructor_from(const i18n::phonenumbers::PhoneMetadata* from, i18n::phonenumbers::PhoneMetadata* output);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_constructor_no_args(i18n::phonenumbers::PhoneMetadata* output);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_country_code(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_default_instance();
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_delete(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_destructor(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_emergency(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_fixed_line(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_general_desc(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_carrier_specific(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_country_code(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_emergency(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_fixed_line(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_general_desc(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_id(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_international_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_leading_digits(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_leading_zero_possible(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_main_country_for_code(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_mobile(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_mobile_number_portable_region(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_national_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_national_prefix_for_parsing(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_national_prefix_transform_rule(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_no_international_dialling(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_pager(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_personal_number(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_preferred_extn_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_preferred_international_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_premium_rate(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_same_mobile_and_fixed_line_pattern(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_shared_cost(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_short_code(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_standard_rate(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_toll_free(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_uan(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_voicemail(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_has_voip(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_id(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_international_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_intl_number_format_index(const i18n::phonenumbers::PhoneMetadata* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT const google::protobuf::RepeatedPtrField< i18n::phonenumbers::NumberFormat >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_intl_number_format_no_args(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_intl_number_format_size(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_leading_digits(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_leading_zero_possible(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_main_country_for_code(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mobile(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mobile_number_portable_region(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_carrier_specific(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_emergency(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_fixed_line(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_general_desc(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_id(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_intl_number_format_index(i18n::phonenumbers::PhoneMetadata* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT google::protobuf::RepeatedPtrField< i18n::phonenumbers::NumberFormat >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_intl_number_format_no_args(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_leading_digits(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_mobile(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_national_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_national_prefix_for_parsing(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_national_prefix_transform_rule(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_no_international_dialling(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_number_format_index(i18n::phonenumbers::PhoneMetadata* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT google::protobuf::RepeatedPtrField< i18n::phonenumbers::NumberFormat >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_number_format_no_args(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_pager(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_personal_number(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_preferred_extn_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_preferred_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_premium_rate(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_shared_cost(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_short_code(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_standard_rate(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_toll_free(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_uan(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_unknown_fields(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_voicemail(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_mutable_voip(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_national_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_national_prefix_for_parsing(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_national_prefix_transform_rule(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_new_from(const i18n::phonenumbers::PhoneMetadata* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_new_no_args();
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_no_international_dialling(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::NumberFormat* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_number_format_index(const i18n::phonenumbers::PhoneMetadata* this_ptr, int index);
LIBPHONENUMBER_SYS_C_EXPORT const google::protobuf::RepeatedPtrField< i18n::phonenumbers::NumberFormat >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_number_format_no_args(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_number_format_size(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneMetadata* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_operator_assign(i18n::phonenumbers::PhoneMetadata* this_ptr, const i18n::phonenumbers::PhoneMetadata* from);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_pager(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_personal_number(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_preferred_extn_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_preferred_international_prefix(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_premium_rate(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_carrier_specific(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_emergency(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_fixed_line(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_general_desc(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_id(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_leading_digits(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_mobile(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_national_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_national_prefix_for_parsing(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_national_prefix_transform_rule(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_no_international_dialling(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_pager(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_personal_number(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_preferred_extn_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_preferred_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_premium_rate(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_shared_cost(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_short_code(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_standard_rate(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_toll_free(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_uan(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_voicemail(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_release_voip(i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_same_mobile_and_fixed_line_pattern(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_carrier_specific(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* carrier_specific);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_emergency(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* emergency);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_fixed_line(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* fixed_line);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_general_desc(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* general_desc);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_id(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* id);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* international_prefix);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_leading_digits(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* leading_digits);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_mobile(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* mobile);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_national_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* national_prefix);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_national_prefix_for_parsing(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* national_prefix_for_parsing);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_national_prefix_transform_rule(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* national_prefix_transform_rule);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_no_international_dialling(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* no_international_dialling);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_pager(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* pager);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_personal_number(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* personal_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_preferred_extn_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* preferred_extn_prefix);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_preferred_international_prefix(i18n::phonenumbers::PhoneMetadata* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* preferred_international_prefix);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_premium_rate(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* premium_rate);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_shared_cost(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* shared_cost);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_short_code(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* short_code);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_standard_rate(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* standard_rate);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_toll_free(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* toll_free);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_uan(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* uan);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_voicemail(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* voicemail);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_allocated_voip(i18n::phonenumbers::PhoneMetadata* this_ptr, i18n::phonenumbers::PhoneNumberDesc* voip);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_country_code(i18n::phonenumbers::PhoneMetadata* this_ptr, int value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_id_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_id_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_id_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_international_prefix_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_international_prefix_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_international_prefix_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_leading_digits_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_leading_digits_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_leading_digits_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_leading_zero_possible(i18n::phonenumbers::PhoneMetadata* this_ptr, bool value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_main_country_for_code(i18n::phonenumbers::PhoneMetadata* this_ptr, bool value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_mobile_number_portable_region(i18n::phonenumbers::PhoneMetadata* this_ptr, bool value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_for_parsing_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_for_parsing_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_for_parsing_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_transform_rule_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_transform_rule_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_national_prefix_transform_rule_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_preferred_extn_prefix_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_preferred_extn_prefix_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_preferred_extn_prefix_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_preferred_international_prefix_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_preferred_international_prefix_char_unsigned_long(i18n::phonenumbers::PhoneMetadata* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_preferred_international_prefix_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneMetadata* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_set_same_mobile_and_fixed_line_pattern(i18n::phonenumbers::PhoneMetadata* this_ptr, bool value);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_shared_cost(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_short_code(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_standard_rate(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_toll_free(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_uan(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_unknown_fields(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_voicemail(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneMetadata_voip(const i18n::phonenumbers::PhoneMetadata* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_ByteSize(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_CheckTypeAndMergeFrom(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const google::protobuf::MessageLite* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_Clear(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_CopyFrom(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const i18n::phonenumbers::PhoneNumberDesc* from);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_DiscardUnknownFields(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_GetCachedSize(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_GetTypeName_as_ptr(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_GetTypeName_to_output(const i18n::phonenumbers::PhoneNumberDesc* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* output);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_IsInitialized(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_MergeFrom(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const i18n::phonenumbers::PhoneNumberDesc* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_New_arena(const i18n::phonenumbers::PhoneNumberDesc* this_ptr, google::protobuf::Arena* arena);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_New_no_args(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_Swap(i18n::phonenumbers::PhoneNumberDesc* this_ptr, i18n::phonenumbers::PhoneNumberDesc* other);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_add_possible_length(i18n::phonenumbers::PhoneNumberDesc* this_ptr, int value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_add_possible_length_local_only(i18n::phonenumbers::PhoneNumberDesc* this_ptr, int value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_clear_example_number(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_clear_national_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_clear_possible_length(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_clear_possible_length_local_only(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_clear_possible_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_constructor_from(const i18n::phonenumbers::PhoneNumberDesc* from, i18n::phonenumbers::PhoneNumberDesc* output);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_constructor_no_args(i18n::phonenumbers::PhoneNumberDesc* output);
LIBPHONENUMBER_SYS_C_EXPORT const i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_default_instance();
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_delete(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_destructor(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_example_number(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_has_example_number(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_has_national_number_pattern(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT bool libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_has_possible_number_pattern(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_mutable_example_number(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_mutable_national_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_mutable_possible_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_mutable_unknown_fields(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_national_number_pattern(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_new_from(const i18n::phonenumbers::PhoneNumberDesc* from);
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_new_no_args();
LIBPHONENUMBER_SYS_C_EXPORT i18n::phonenumbers::PhoneNumberDesc* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_operator_assign(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const i18n::phonenumbers::PhoneNumberDesc* from);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_possible_length_local_only_size(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT int libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_possible_length_size(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_possible_number_pattern(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_release_example_number(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_release_national_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_release_possible_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_allocated_example_number(i18n::phonenumbers::PhoneNumberDesc* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* example_number);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_allocated_national_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* national_number_pattern);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_allocated_possible_number_pattern(i18n::phonenumbers::PhoneNumberDesc* this_ptr, std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* possible_number_pattern);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_example_number_char(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_example_number_char_unsigned_long(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_example_number_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_national_number_pattern_char(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_national_number_pattern_char_unsigned_long(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_national_number_pattern_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_possible_length(i18n::phonenumbers::PhoneNumberDesc* this_ptr, int index, int value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_possible_length_local_only(i18n::phonenumbers::PhoneNumberDesc* this_ptr, int index, int value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_possible_number_pattern_char(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const char* value);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_possible_number_pattern_char_unsigned_long(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const char* value, unsigned long size);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_set_possible_number_pattern_std___cxx11_basic_string_char_std_char_traits_char_std_allocator_char(i18n::phonenumbers::PhoneNumberDesc* this_ptr, const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* value);
LIBPHONENUMBER_SYS_C_EXPORT const std::__cxx11::basic_string< char, std::char_traits< char >, std::allocator< char > >* libphonenumber_sys_c_i18n_phonenumbers_PhoneNumberDesc_unknown_fields(const i18n::phonenumbers::PhoneNumberDesc* this_ptr);
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_phonemetadata_G_i18n_phonenumbers_protobuf_AddDesc_phonemetadata_2eproto();
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_phonemetadata_G_i18n_phonenumbers_protobuf_AssignDesc_phonemetadata_2eproto();
LIBPHONENUMBER_SYS_C_EXPORT void libphonenumber_sys_c_phonemetadata_G_i18n_phonenumbers_protobuf_ShutdownFile_phonemetadata_2eproto();

} // extern "C"

#endif // LIBPHONENUMBER_SYS_C_PHONEMETADATA_H
